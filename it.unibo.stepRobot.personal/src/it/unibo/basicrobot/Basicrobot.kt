/* Generated by AN DISI Unibo */ 
package it.unibo.basicrobot

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Basicrobot ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
					}
					 transition(edgeName="t00",targetState="handleStep",cond=whenDispatch("step"))
					transition(edgeName="t01",targetState="handleStop",cond=whenDispatch("stop"))
				}	 
				state("handleStep") { //this:State
					action { //it:State
						stateTimer = TimerActor("timer_handleStep", 
							scope, context!!, "local_tout_basicrobot_handleStep", 2000.toLong() )
					}
					 transition(edgeName="t12",targetState="handleStop",cond=whenTimeout("local_tout_basicrobot_handleStep"))   
					transition(edgeName="t13",targetState="handleStop",cond=whenDispatch("stop"))
				}	 
				state("handleStop") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
}

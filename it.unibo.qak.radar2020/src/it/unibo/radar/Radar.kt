/* Generated by AN DISI Unibo */ 
package it.unibo.radar

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Radar ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("radar start")
						radarPojo.radarSupport.setUpRadarGui(  )
					}
					 transition( edgeName="goto",targetState="waitForDataToShow", cond=doswitch() )
				}	 
				state("waitForDataToShow") { //this:State
					action { //it:State
					}
					 transition(edgeName="t00",targetState="showSpot",cond=whenRequest("polar"))
				}	 
				state("showSpot") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("polar(D,A)"), Term.createTerm("polar(D,A)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												val Distance = payloadArg(0)
											    val DistInt  = Distance.toInt()
												val Angle    = payloadArg(1) 
								if(DistInt <= 90){ radarPojo.radarSupport.update( Distance, Angle  )
								answer("polar", "fromRadar", "fromRadar(done)"   )  
								 }
						}
					}
					 transition( edgeName="goto",targetState="waitForDataToShow", cond=doswitch() )
				}	 
			}
		}
}

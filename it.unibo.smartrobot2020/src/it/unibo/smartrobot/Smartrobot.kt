/* Generated by AN DISI Unibo */ 
package it.unibo.smartrobot

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Smartrobot ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 
		var StepTime = 0L 
		var WithResource = true
		var IsBottle = false
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("smartrobot starts")
						forward("cmd", "cmd(l)" ,"basicrobot" ) 
						delay(1000) 
						forward("cmd", "cmd(h)" ,"basicrobot" ) 
						forward("cmd", "cmd(r)" ,"basicrobot" ) 
						delay(1000) 
						forward("cmd", "cmd(h)" ,"basicrobot" ) 
						println("smartrobot started")
					}
					 transition( edgeName="goto",targetState="activateResource", cond=doswitchGuarded({WithResource}) )
					transition( edgeName="goto",targetState="work", cond=doswitchGuarded({! WithResource}) )
				}	 
				state("activateResource") { //this:State
					action { //it:State
						kotlincode.resServer.init(myself)
						kotlincode.coapSupport.init( "coap://localhost:5683"  )
						consolegui.consoleGui.create(  )
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
					}
					 transition(edgeName="s05",targetState="handleCmd",cond=whenDispatch("cmd"))
					transition(edgeName="s06",targetState="doStep",cond=whenDispatch("step"))
					transition(edgeName="s07",targetState="handleStopNotExpected",cond=whenDispatch("stop"))
					transition(edgeName="s08",targetState="updateDistanceResource",cond=whenEvent("polar"))
				}	 
				state("updateDistanceResource") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("polar(D,Angle)"), Term.createTerm("polar(D,A)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								if(WithResource){ kotlincode.coapSupport.updateResource(myself ,"robot/sonar", "distance(${payloadArg(0)})" )
								 }
						}
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("handleStopNotExpected") { //this:State
					action { //it:State
						println("smartrobot | WARNING: stop command should not be sent here")
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("handleCmd") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("cmd(X)"), Term.createTerm("cmd(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								var Move = payloadArg(0)
								forward("cmd", "cmd($Move)" ,"basicrobot" ) 
								if(( WithResource )){ kotlincode.coapSupport.updateResource(myself ,"robot/pos", "u$Move" )
								 }
						}
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("doStep") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("step(DURATION)"), Term.createTerm("step(T)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 StepTime = payloadArg(0).toLong() 
								request("onestep", "onestep($StepTime)" ,"onestepahead" )  
						}
					}
					 transition(edgeName="t09",targetState="updateStepDone",cond=whenReply("stepdone"))
					transition(edgeName="t010",targetState="stepFailed",cond=whenReply("stepfail"))
				}	 
				state("updateStepDone") { //this:State
					action { //it:State
						if(WithResource){ kotlincode.coapSupport.updateResource(myself ,"robot/pos", "up" )
						 }
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("stepFailed") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("stepfail(DURATION,CAUSE)"), Term.createTerm("stepfail(D,C)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								IsBottle = payloadArg(1).startsWith("bottle")
								var DT = payloadArg(0).toLong() / 10
								forward("cmd", "cmd(s)" ,"basicrobot" ) 
								delay(DT)
								forward("cmd", "cmd(h)" ,"basicrobot" ) 
								println(" --- smartrobot stepFailed ${payloadArg(1)} $IsBottle")
								if(IsBottle){ forward("cmd", "cmd(${payloadArg(1)})" ,"basicrobot" ) 
								delay(100) 
								forward("step", "step(370)" ,"smartrobot" ) 
								 }
						}
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
}

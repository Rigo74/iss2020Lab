/* Generated by AN DISI Unibo */ 
package it.unibo.walker

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Walker ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		var NumOfRotations = 0
		  var Stopped   = false 
		  var RobotPos  : String
		  var RobotDir  : String
		  var PosChanged = false
		  val ResultMap =   hashMapOf( 1 to "-", 2 to "-" )
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
					}
					 transition(edgeName="t011",targetState="walk",cond=whenEvent("boundary"))
				}	 
				state("walk") { //this:State
					action { //it:State
						PosChanged  = false 
						 kotlincode.coapSupport.readPos( "robot/pos", ResultMap ) 
						           RobotPos = ResultMap.get(1)!!
						           RobotDir = ResultMap.get(2)!!
						println("WALKER | walk pos =  ${ResultMap.get(1)} ")
						forward("step", "step(370)" ,"smartrobot" ) 
						delay(1000) 
								  
						          kotlincode.coapSupport.readPos( "robot/pos", ResultMap ) 
						          PosChanged = ResultMap.get(1)!! != RobotPos
						println("WALKER | RobotPos =  ${ResultMap.get(1)} changed=$PosChanged")
					}
					 transition( edgeName="goto",targetState="walk", cond=doswitchGuarded({PosChanged}) )
					transition( edgeName="goto",targetState="rotate", cond=doswitchGuarded({! PosChanged}) )
				}	 
				state("rotate") { //this:State
					action { //it:State
						println("WALKER | ==================================== rotate ")
						NumOfRotations++
						forward("cmd", "cmd(l)" ,"smartrobot" ) 
						delay(300) 
					}
					 transition( edgeName="goto",targetState="s0", cond=doswitchGuarded({(NumOfRotations==4)}) )
					transition( edgeName="goto",targetState="walk", cond=doswitchGuarded({! (NumOfRotations==4)}) )
				}	 
			}
		}
}

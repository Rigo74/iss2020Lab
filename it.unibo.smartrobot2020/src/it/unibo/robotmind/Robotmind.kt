/* Generated by AN DISI Unibo */ 
package it.unibo.robotmind

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Robotmind ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
		var StepTime     = 1000L   
		var Duration     = 0 
		var Move         = "h"
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("ROBOT MIND STARTED")
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
					}
					 transition(edgeName="t06",targetState="handleModelChanged",cond=whenEvent("local_modelChanged"))
				}	 
				state("handleModelChanged") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("modelChanged(TARGET,VALUE)"), Term.createTerm("modelChanged(robot,M)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												Move = payloadArg(1)
								 				println( "TODO $Move " ) 
						}
					}
					 transition( edgeName="goto",targetState="doStep", cond=doswitchGuarded({(payloadArg(1) == "p")}) )
					transition( edgeName="goto",targetState="doMove", cond=doswitchGuarded({! (payloadArg(1) == "p")}) )
				}	 
				state("doStep") { //this:State
					action { //it:State
						request("step", "step(350)" ,"onestepahead" )  
					}
					 transition(edgeName="t07",targetState="stepDone",cond=whenReply("stepdone"))
					transition(edgeName="t08",targetState="stepFailed",cond=whenReply("stepfail"))
				}	 
				state("stepDone") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						kotlincode.coapSupport.updateResource(myself ,"robot/pos", "p" )
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("stepFailed") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("doMove") { //this:State
					action { //it:State
						println("$Move")
						forward("cmd", "cmd(Move)" ,"basicrobot" ) 
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
}

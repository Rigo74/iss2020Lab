/*
 * ================================================================
 * This file includes A TEXTUAL REPRESENTATION of A MODEL 
 * of the required software system expressed using 
 * the language (metamodel) qak as the result of PROJECT PHASE.
 * REQUIREMENTS in Lab3_2020.html
 * ================================================================
 */
System smartrobot  

mqttBroker "localhost" : 1883  
 
Dispatch cmd       : cmd(X)
 
Request  step      :  step(DURATION)
Reply    stepdone  :  stepdone(V)  
Reply    stepfail  :  stepfail(DURATION, CAUSE)
Dispatch stop      :  stop(V)   
 
Event  obstacle    : obstacle( DISTANCE )  
Event  alarm       : alarm(V)           
  
Context ctxSmartRobot ip [ host= "localhost"     port= 8020 ] +mqtt  
Context ctxBasicRobot ip [ host= "192.168.1.5"   port= 8018 ] +mqtt      

ExternalQActor basicrobot context ctxBasicRobot   
 
/*  
 * ---------------------------------------------------------------------------
 * smartrobot
 * ---------------------------------------------------------------------------
 */ 
 
QActor smartrobot context ctxSmartRobot{
[" 
var StepTime = 1000L;  
var Duration = 0 
"]  	
	State s0 initial{
		run kotlincode.resServer.init()
		run kotlincode.coapSupport.init("coap://localhost:5683")
		delay 1000 
		run kotlincode.resourceObserver.init("coap://localhost:5683","robot/pos") 
		forward basicrobot -m cmd : cmd( a ) 
		delay 1000
		forward basicrobot -m cmd : cmd( d )
		delay 1000
		forward basicrobot -m cmd : cmd( h )
		//
		run kotlincode.coapSupport.updateResource("robot/pos", "w")
		run kotlincode.coapSupport.readResource("robot/pos") 
		run kotlincode.coapSupport.readResource("robot/sonar") 
		println("smartrobot started")
		
	}
	Goto work
	
	State work{	}
	Transition s0 
 			whenMsg cmd      -> handleCmd
			whenRequest step -> doStep
			whenMsg stop     -> handleStopNotExpected		 
 		    whenEvent obstacle -> ignoreObstacle 
  	 
 	State handleStopNotExpected{
 		println("smartrobot | WARNING: the stop command should not be sent here")
 	}
 	Goto work
 	
 	State ignoreObstacle{ println("smartrobot | IGNORE obstacle event")
 	}Goto work
 
 /*
  * REQUIREMENT req-cmd
  */
	State handleCmd {
		printCurrentMessage 
		onMsg( cmd : cmd(X) ){ forward basicrobot -m cmd : cmd( $payloadArg(0) ) }
	} Goto work

 /*
  * ---------------------------------------------------------------------------
  * REQUIREMENT req-step 
  * ---------------------------------------------------------------------------
  */ 
	State doStep{ 
 		printCurrentMessage  
		onMsg( step : step( T ) ){
			["StepTime = payloadArg(0).toLong() 
			  println(\"smartrobot | doStep StepTime =$StepTime \")
			  startTimer()"]	//REQUIREMENT req-step-time
			forward basicrobot -m cmd : cmd( w )
		}  
	}  
	Transition t0 
		whenTimeVar StepTime  -> endStep	
		whenMsg stop          -> stepStop		  
		whenEvent obstacle    -> stepFail
 	
	State endStep{  //REQUIREMENT  req-step-info
		forward basicrobot -m cmd : cmd( h ) 
		println("smartrobot | step DONE")
		run kotlincode.coapSupport.updateResource("robot/pos", "w")
		replyTo step with stepdone : stepdone(ok)
  	}
	Goto work
	 
	State stepStop{ //REQUIREMENT req-stop, req-step-time, req-step-info
		["Duration=getDuration()"]  //getDuration: built-in (with ref. to startTimer)
		forward basicrobot -m cmd : cmd( h ) 
		replyTo step with stepfail : stepfail($Duration, stopped)
		println("smartrobot | stepStop Duration=$Duration ")
 	}
	Goto work  	 

	State stepFail{ //REQUIREMENT req-step-time, req-step-info
		["Duration=getDuration()"]  //getDuration(): built-in (with ref. to startTimer)
		replyTo step with stepfail : stepfail($Duration, obstacle)
		println("smartrobot | stepFail Duration=$Duration ")
		//emit alarm : alarm( stepobstacle )  
  	}
	Goto work  	

}

//QActor observer context ctxSmartRobot{
//	State s0 initial{
//		println("observer ON") 
//	}
//	Transition t0 
//		whenEvent obstacle -> show
//		
//	State show{
//		printCurrentMessage
//	}
//	Goto s0
//}
 

/*
 * ================================================================
 * This file includes A TEXTUAL REPRESENTATION of A MODEL 
 * of the required software system expressed using 
 * the language (metamodel) qak as the result of PROJECT PHASE.
 * ================================================================
 */ 
System smartrobot  

mqttBroker "localhost" : 1883  
 
Dispatch cmd       : cmd(X)

Dispatch  step     :  step(DURATION)	//sent by the CoAP resource
Request  onestep   :  onestep(DURATION)	//internal
Reply    stepdone  :  stepdone(V)  
Reply    stepfail  :  stepfail(DURATION, CAUSE)
Dispatch stop      :  stop(V)   		//sent by an external user to block the onestep

Event    boundary  : boundary(V)

Event  obstacle    : obstacle( DISTANCE )  
Event  alarm       : alarm(V)             
Event  polar       : polar( D,Angle)			//generated by basicrobot

  
Context ctxSmartRobot ip [ host= "localhost"     port= 8020 ] +mqtt  
Context ctxBasicRobot ip [ host= "127.0.0.1"   port= 8018 ] +mqtt      

ExternalQActor basicrobot context ctxBasicRobot   
 
 
 /*
 * ====================================================================
 * onestepahead
 * ====================================================================
 */
QActor onestepahead context ctxSmartRobot {
[" 
var foundObstacle = false; 
var StepTime = 0L; 
var Duration=0 
"]    
	State s0 initial {	  
		println("onestepahead STARTED")  
		["foundObstacle = false "]
	}Goto work 
 	
 	State work{		
 	}
 	Transition t0 whenRequest onestep  -> doStep
 	
	State doStep{ 
 		printCurrentMessage  
		onMsg( onestep : onestep( T ) ){
			["StepTime = payloadArg(0).toLong() 
			  println(\"smartrobot | doStep StepTime =$StepTime \")
			  startTimer()"]	//REQUIREMENT req-onestep-time
			forward basicrobot -m cmd : cmd( w )  //ATTEMPT TO MOVE ...
		}  
	}  
	Transition t0 
		whenTimeVar StepTime  -> endStep	
		whenMsg stop          -> stepStop		  
		whenEvent obstacle    -> stepFail
 	
	State endStep{  //REQUIREMENT  req-onestep-info
		forward basicrobot -m cmd : cmd( h ) 
		//println("onestepahead | onestep DONE")
		//run kotlincode.coapSupport.updateResource(myself, "robot/pos", "p")  //Step
		replyTo onestep with stepdone : stepdone(ok)
  	}
	Goto work
	 
	State stepStop{ //REQUIREMENT req-stop, req-onestep-time, req-onestep-info
		["Duration=getDuration()"]  //getDuration: built-in (with ref. to startTimer)
		forward basicrobot -m cmd : cmd( h ) 
		replyTo onestep with stepfail : stepfail($Duration, stopped)
		//println("onestepahead | stepStop Duration=$Duration ")
 	}
	Goto work  	 

	State stepFail{ //REQUIREMENT req-onestep-time, req-onestep-info
		["Duration=getDuration()"]  //getDuration(): built-in (with ref. to startTimer)
		replyTo onestep with stepfail : stepfail($Duration, obstacle)
		//println("onestepahead | stepFail Duration=$Duration ")
   	}
	Goto work 
}    
 
/*  
 * ---------------------------------------------------------------------------
 * smartrobot
 * ACTIVATES A CoAP resource
 * ACCEPTS COMMANDS from a console  (see SmartRobotUsage.ipynb)
 * ACCEPTS COMMANDS from Copper 
 * UPDATES the resource robot/pos at each onestep and rotation
 * ---------------------------------------------------------------------------
 */ 
 
QActor smartrobot context ctxSmartRobot{
[" 
var StepTime = 0L 
var WithResource = true
"]  	
	State s0 initial{
 		println("smartrobot starts")
 		forward basicrobot -m cmd : cmd( l ) 
		delay 1000
		forward basicrobot -m cmd : cmd( h )
		forward basicrobot -m cmd : cmd( r )
		delay 1000
		forward basicrobot -m cmd : cmd( h )
		//
		println("smartrobot started")
		
	}
	Goto activateResource  if "WithResource" else work
	
	State activateResource{ 
		run kotlincode.resServer.init(myself)
		run kotlincode.coapSupport.init("coap://localhost:5683")  //TO CHANGE!!!
		delay 1000 
		run kotlincode.resourceObserver.init("coap://localhost:5683","robot/pos")
		//run kotlincode.coapSupport.readResource(myself, "robot/pos") 
		//run kotlincode.coapSupport.readResource(myself, "robot/sonar")
	}
	Goto work 
	
	State work{	}
	Transition s0 
 			whenMsg cmd        -> handleCmd
			whenMsg step       -> doStep
			whenMsg stop       -> handleStopNotExpected		 
 		    whenEvent obstacle -> ignoreObstacle 
  			whenEvent polar    -> updateDistanceResource
  			
  	State updateDistanceResource{
  		printCurrentMessage
		onMsg( polar : polar(D,A)){			
			if "WithResource"{
				run kotlincode.coapSupport.updateResource(
					myself, "robot/sonar", "distance(${payloadArg(0)})"
				)
			}   
		}
	}
  	Goto work
  	
 	State handleStopNotExpected{
 		println("smartrobot | WARNING: the stop command should not be sent here")
 	}
 	Goto work
 	
 	State ignoreObstacle{ 
 		println("smartrobot | IGNORE obstacle event")
 	}Goto work
 
 /* 
  * REQUIREMENT req-cmd: redirection
  */
	State handleCmd {
		printCurrentMessage 
		onMsg( cmd : cmd(X) ){ 
			["var Move = payloadArg(0)"]
			forward basicrobot -m cmd : cmd( $Move )
			if "( WithResource )" {
				run kotlincode.coapSupport.updateResource(myself, "robot/pos", "u$Move")
			}
		}
	} Goto work 

 /*
  * ---------------------------------------------------------------------------
  * REQUIREMENT req-onestep 
  * ---------------------------------------------------------------------------
  */ 
  
    State doStep{       	 
    	onMsg( step : step( T ) ){
	    	[" StepTime = payloadArg(0).toLong() "]  
	    	request onestepahead -m onestep : onestep($StepTime) 
    	}
    }
    Transition t0 
       		whenReply stepdone -> updateStepDone
     		whenReply stepfail -> stepFailed
       	
     State updateStepDone{
		if "WithResource"{run kotlincode.coapSupport.updateResource(myself, "robot/pos", "up")}   
     }
     Goto work
  
  
	State stepFailed{ //REQUIREMENT req-onestep-time, req-onestep-info
 		onMsg( stepfail : stepfail(D,C) ){
			//COMPENSATE
			["var DT = payloadArg(0).toLong() / 4"]
			forward basicrobot -m cmd : cmd(s)
			delayVar DT
			forward basicrobot -m cmd : cmd(h)
		}
   	}
	Goto work  	
    
}

QActor walker context ctxSmartRobot{
["var NumOfRotations = 0
  var Stopped   = false 
  var RobotPos  : String
  var RobotDir  : String
  var PosChanged = false
  val ResultMap =   hashMapOf( 1 to \"-\", 2 to \"-\" )
"]
	State s0 initial{
		println("walker ON") 
	}
	Transition t0 
		whenEvent boundary -> walk
		 
	State walk{
		["PosChanged  = false "]
		delay 300
		[" kotlincode.coapSupport.readPos( \"robot/pos\", ResultMap ) 
           RobotPos = ResultMap.get(1)!!
           RobotDir = ResultMap.get(2)!!
	     "]
		forward smartrobot -m  step :  step(370)
		//request onestepahead -m onestep : onestep( 370 )  //does not update the map
		delay 500
		["		  
          kotlincode.coapSupport.readPos( \"robot/pos\", ResultMap ) 
          PosChanged = ResultMap.get(1)!! != RobotPos
          println( \"RobotPos = ${ResultMap.get(1)}, PosChanged=$PosChanged\" )
		"]
		
	}
	Goto walk if "PosChanged" else rotate
//	Goto lookAtRobotPos
//	Transition t0 
//		whenReply stepdone -> walk
//		whenReply stepfail -> handeStepFail
	
 	
//	State handeStepFail{ 
//		printCurrentMessage		
//		onMsg( stepfail : stepfail(D,stopped) ){ ["Stopped = true"]}
//	}
//	Goto walk if "Stopped" else rotate
	
	State rotate{
		printCurrentMessage
		["NumOfRotations++"]
		forward smartrobot -m cmd : cmd(l)
		delay 1000
	}
	Goto s0 if "(NumOfRotations==4)" else walk
}
 	
 

 

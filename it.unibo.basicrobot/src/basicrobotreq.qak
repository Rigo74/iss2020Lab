/*
 * ================================================================
 * This file includes A TEXTUAL REPRESENTATION of A MODEL 
 * of the required software system expressed using 
 * the language (metamodel) qak as the result of REQUIREMENT PHASE.
 * 
 * The model describes the logical architecture of the systems
 * by 'formally' specifying the  STRUCTURE, INTERACTION, BEHAVIOR
 * of its components
* ================================================================
 */
System basicrobot

Dispatch cmd  : cmd(X)
Dispatch step : step(DURATION)
//Event cmd : cmd(X)


Context ctxRobot ip [ host= "localhost"   port= 8018 ]

QActor robot context ctxRobot{
	State s0 initial{
		println("robot start")
		run itunibo.robotVirtual.clientWenvObjTcp.initClientConn( myself )
	}
	Goto work
	
	State work{
		println("robot waiting ...")
	}
	Transition s0 
			whenMsg cmd  -> handleCmd
			whenMsg step -> handleStep
 
	State handleCmd {
		printCurrentMessage
		onMsg( cmd : cmd(X) ){
			[" val MoveToDo = payloadArg(0) "]
			//println("robot should execute the given command $MoveToDo")	
			run itunibo.robotVirtual.clientWenvObjTcp.sendMsg(MoveToDo)
	
		}
	}
	Goto work

	State handleStep {
		printCurrentMessage
		//TODO 
	}
	Goto work

}

/*
 * This actor is not part of the system.
 * It is introduced to make testing easier.
 */

QActor robotcallersimulator context ctxRobot{
	State s0 initial{
		println("robotCallerSimulator start")
		forward robot -m cmd : cmd(w)
 		delay 1000
 		forward robot -m cmd : cmd(h)
 		delay 1000
		forward robot -m step : step(1000)
	}
}

/* 
QActor eventperceiver context ctxRobot{
	State s0 initial{
	}
	Transition s0 whenEvent cmd -> handleCmd
	
	State handleCmd {
		printCurrentMessage
	}
	Goto s0
}
*/
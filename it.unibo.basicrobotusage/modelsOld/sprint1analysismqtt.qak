System sprint1analysismqtt

mqttBroker "localhost" : 1883 

Event userCmd  : userCmd(X)			//emitted by external interface
Event obstacle : obstacle( DISTANCE )	//generated by sonaractorfilter.kt in basicrobot
Event polar    : polar( D,Angle)		//generated by sonarforradar.kt in basicrobot

Context ctxRobotAppl0 ip [ host= "localhost"  port= 8033 ]   +mqtt 

QActor robotappl0 context ctxRobotAppl0{
	State s0 initial{
		println("robotappl0 START")
 	}  
 	Goto work
 	
 	State work{}
	Transition t0 
		whenEvent obstacle -> handleObstacle
	 
	//REQ-MOVE : fulfilled by the basicrobot when commands are userCmd events 
	//REQ-SHOW-DATA : : fulfilled by the basicrobot when data are polar events
 	
 	//REQ-TURN
	State handleObstacle{
		emit userCmd:userCmd(a)
		delay 500
		emit userCmd:userCmd(a)		
	}
	Goto work
}

QActor consolesimulator context ctxRobotAppl0{
	State s0 initial{
  		delay 1000
		println("console START")
 	}  
 	Goto work
 	
 	State work{
 		emit userCmd : userCmd(a)
 		delay 1000
 		emit userCmd : userCmd(d)
 	}
}
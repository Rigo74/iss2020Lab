System sprint3analysis
/*
 * direct commands to the basic robot must now forbidden
 * the abort of a step should be related to a new command stop (and not to cmd(h)
 * otherwise we could loose the event for the need to check the message
 */
mqttBroker "localhost" : 1883 

Dispatch cmd   : cmd(X)					//sent by an external user interface
Dispatch step  : step(T)			//sent by external user interface
Dispatch stop  : stop(V)			//sent by external user interface

Event userCmd  : userCmd(X)			//NO MORE emitted by external interface
Event obstacle : obstacle( DISTANCE )	//generated by sonaractorfilter.kt in basicrobot
Event polar    : polar( D,Angle)		//generated by sonarforradar.kt in basicrobot

Context ctxRobotAppl0 ip [ host= "localhost"  port= 8033 ]   +mqtt 

QActor robotappl0 context ctxRobotAppl0{
["
var StepTime=0L
var StepDuration=0L
"]
	State s0 initial{
		println("robotappl0 START")
 	}  
 	Goto work
 	 
 	State work{}
	Transition t0 
		whenEvent obstacle -> handleObstacle
		whenMsg cmd        -> doUserCmd
		whenMsg step       -> doStep
	 
	//REQ-MOVE : redirect to basicrobot
	State doUserCmd{
		onMsg( cmd:cmd(M)){ emit userCmd:userCmd($payloadArg(0))}
	}  
	Goto work
	
	//REQ-SHOW-DATA :fulfilled by the basicrobot when data are polar events 	
 	//REQ-TURN
	State handleObstacle{
		emit userCmd:userCmd(a)
	}
	Goto work
	 
	
	//REQ-STEP
	State doStep{
		onMsg( step : step(T ) ){
			["
				StepDuration = 0L
				StepTime = payloadArg(0).toLong()
				startTimer()
			"]
			emit userCmd:userCmd(w)	
 		}		 
	}
	Transition t0
		whenTimeVar StepTime -> endStep
		whenEvent obstacle   -> abortTheStep
		whenMsg stop         -> abortTheStep
		
	State endStep{    
		emit userCmd:userCmd(h)	
		["StepDuration = 0L"]   //reset the value
		println("robotappl0 | step DONE $StepTime")
   	}
	Goto work 
	
	State abortTheStep{
		emit userCmd:userCmd(h)  //redundat if obstacle, but necessary if stop
		["StepDuration = getDuration().toLong()"]	 
		println("robotappl0 | abortTheStep $StepDuration")
 		emit userCmd:userCmd(s)	 
	}
	Transition t0 
		whenTimeVar StepDuration -> endStep
		
	
} 

QActor consolesimulator context ctxRobotAppl0{
	State s0 initial{
  		delay 1000
		println("console START")
 	}  
 	Goto work
 	
 	State work{
 		emit userCmd : userCmd(a)
 		delay 1000
 		emit userCmd : userCmd(d)
 	}
}
/*
 * ================================================================
 * This exmaple shows that
 * the caller of an External QActor can perceive events emitted
 * by (any actor working in the context of ) the External QActor.
 * These events can be perceived also by any QActor working
 * in the context of the caller.
 * ================================================================
 */
System basicrobotusage

Dispatch cmd          : cmd(X)
Event  obstacle       : obstacle( DISTANCE )
  
Context ctxRobotUsage  ip [ host= "localhost"      port= 8048 ]
Context ctxBasicRobot  ip [ host= "192.168.1.6"   port= 8018 ] 
 
ExternalQActor basicrobot context ctxBasicRobot

QActor robotusage context ctxRobotUsage{
	State s0 initial{ 
		println("robotusage start")
	}
	Goto work
 
 	State work{
		delay 1000  
		println("robotusage send w")
		forward basicrobot -m cmd : cmd( w )
  	}
	Transition t0 
		whenEvent obstacle -> handleObstacle
			
	State handleObstacle{
		printCurrentMessage
		println("robotusage handleObstacle ")
	}
 }
 
 QActor callerfriend context ctxRobotUsage{
	State s0 initial{ 
		println("callerfriend start")
	}
	Transition t0 
		whenEvent obstacle -> handleObstacle
 	
	State handleObstacle{
		printCurrentMessage
		println("callerfriend handleObstacle ")
	}
 }

 
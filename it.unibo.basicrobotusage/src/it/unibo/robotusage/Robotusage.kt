/* Generated by AN DISI Unibo */ 
package it.unibo.robotusage

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Robotusage ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("robotusage start")
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						delay(1000) 
						forward("cmd", "cmd(a)" ,"basicrobot" ) 
						delay(1000) 
						forward("cmd", "cmd(d)" ,"smartrobot" ) 
						delay(1000) 
						println("robotusage send w to smartrobot")
						forward("cmd", "cmd(w)" ,"smartrobot" ) 
						delay(1000) 
						forward("cmd", "cmd(h)" ,"smartrobot" ) 
						delay(1000) 
					}
					 transition(edgeName="t00",targetState="handleObstacle",cond=whenEvent("obstacle"))
				}	 
				state("handleObstacle") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("robotusage handleObstacle ")
					}
				}	 
			}
		}
}

/* Generated by AN DISI Unibo */ 
package it.unibo.robotusage

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Robotusage ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		var NumOfStep = 0
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("robotusage start")
					}
					 transition( edgeName="goto",targetState="boundary", cond=doswitch() )
				}	 
				state("boundary") { //this:State
					action { //it:State
						forward("cmd", "cmd(w)" ,"basicrobot" ) 
					}
					 transition(edgeName="t00",targetState="rotate",cond=whenEvent("obstacle"))
				}	 
				state("rotate") { //this:State
					action { //it:State
						NumOfStep = NumOfStep + 1
						forward("cmd", "cmd(a)" ,"basicrobot" ) 
						delay(1000) 
						forward("cmd", "cmd(h)" ,"basicrobot" ) 
					}
					 transition( edgeName="goto",targetState="boundary", cond=doswitchGuarded({(NumOfStep < 4)}) )
					transition( edgeName="goto",targetState="work", cond=doswitchGuarded({! (NumOfStep < 4)}) )
				}	 
				state("work") { //this:State
					action { //it:State
					}
					 transition(edgeName="t01",targetState="handleObstacle",cond=whenEvent("obstacle"))
				}	 
				state("handleObstacle") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("robotusage handleObstacle ")
					}
				}	 
			}
		}
}

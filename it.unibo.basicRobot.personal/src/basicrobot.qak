/*
 * This is a textual representation of a model expressed using the QAK language (meta-model)
 * that describes the structure, interaction, behaviour of the software system according 
 * to the requirements.
 */

System basicrobot

Dispatch cmd  : cmd(X)
Dispatch step : step(DURATION)
Dispatch stop : stop
//Event cmd : cmd(X)

Context ctxRobot ip [ host= "localhost"   port= 8018 ]

QActor robot context ctxRobot {
	[" var StepTime = 0L; "]
	State s0 initial {
		println("robot start")
		run itunibo.robotVirtual.clientWenvObjTcp.initClientConn(myself)
	}
	Goto work
	
	State work {
		println("robot waiting...")
	}
	
	Transition t0 
		whenMsg cmd -> handleCmd
		//whenEvent cmd -> handleCmd
		whenMsg step -> doStep
		whenMsg stop -> doStop
	
	State handleCmd {
		printCurrentMessage
		onMsg(cmd : cmd(X)) {
			[" val moveToDo = payloadArg(0) "]
			run itunibo.robotVirtual.clientWenvObjTcp.sendMsg(moveToDo)
		}
	}
	Goto work
	/*
  	 * REQUIREMENT req-step
  	 */
  	State doStep {
		printCurrentMessage
		onMsg(  step :  step( T ) ){
			 ["StepTime = payloadArg(0).toLong()"] 
 			 run itunibo.robotVirtual.clientWenvObjTcp.sendMsg("w")
		}
	}
	
	Transition t0 
		whenTimeVar StepTime -> endStep	//req-step
		whenMsg 	stop     -> endStep	//req-stop
	
	State endStep {
		printCurrentMessage
		run itunibo.robotVirtual.clientWenvObjTcp.sendMsg("h")
	}
	Goto work
	
	State doStop {
		printCurrentMessage
		//TODO 
	}
	Goto work
}

QActor robotcallersimulator context ctxRobot {
	State s0 initial {
		println("robotCallerSimulator start")
		//emit cmd : cmd(w) //for event communication
		// go in step and back home
		forward robot -m step : step(1000)
		delay 1000
		forward robot -m cmd : cmd(d)
		delay 1000
		forward robot -m cmd : cmd(d)
		delay 1000
		forward robot -m step : step(1000)
		delay 1000
		forward robot -m cmd : cmd(d)
		delay 1000
		forward robot -m cmd : cmd(d)
		delay 1000
		
		// go in step and stop before time exceed
		forward robot -m step : step(10000)
		delay 1000
		forward robot -m stop : stop
		delay 1000
		forward robot -m cmd : cmd(d)
		delay 1000
		forward robot -m cmd : cmd(d)
		delay 1000
		forward robot -m cmd : cmd(w)
		delay 1000
		forward robot -m cmd : cmd(d)
		delay 1000
		forward robot -m cmd : cmd(d)
		delay 1000
	}
}

/*
QActor eventperceiver context  ctxRobot {
	State s0 initial {
	}
	
	Transition t0 
		//whenEvent cmd -> handleCmd
		whenMsg cmd -> handleCmd
	
	State handleCmd {
		printCurrentMessage
	}
	Goto s0
}
*/






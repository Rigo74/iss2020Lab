/*
 * This is a textual representation of a model expressed using the language (meta-model) QAK
 * that describes the structure, the interaction and the behaviour of the software system 
 * according to the requirements. This is the result of the project phase.
 */

System basicrobot

Dispatch cmd  : cmd(X)
Dispatch step : step(DURATION)
Dispatch stop : stop

Context ctxRobot ip [ host= "localhost"   port= 8018 ]

QActor robot context ctxRobot {
	[" var StepTime = 0L; "]
	State s0 initial {
		println("robot start")
		run itunibo.robotVirtual.clientWenvObjTcp.initClientConn(myself)
	}
	Goto work
	
	State work {
		println("robot waiting...")
	}
	
	Transition t0
		/*
		 * REQUIREMENT req-cmd
		 * This allow the robot to handle the commands it receives.
		 */
		whenMsg cmd -> handleCmd
		/*
		 * REQUIREMENT req-step
		 * This allow to moves the robot forward for a prefixed time.
		 */
		whenMsg step -> doStep
		/*
	  	 * REQUIREMENT req-stop
	  	 * This allow to stop any ongoing movement immediately when receiving 
	  	 * the message "stop".
	  	 */
		whenMsg stop -> doStop
	
	/*
  	 * REQUIREMENT req-cmd
  	 * This allow to communicate the received command to the robot.
  	 */
	State handleCmd {
		printCurrentMessage
		onMsg(cmd : cmd(X)) {
			[" val moveToDo = payloadArg(0) "]
			run itunibo.robotVirtual.clientWenvObjTcp.sendMsg(moveToDo)
		}
	}
	Goto work

	/*
  	 * REQUIREMENT req-step
  	 * The command step moves the robot forward for a prefixed time.
  	 */
  	State doStep {
		printCurrentMessage
		onMsg(  step :  step( T ) ){
			 ["StepTime = payloadArg(0).toLong()"] 
 			 run itunibo.robotVirtual.clientWenvObjTcp.sendMsg("w")
		}
	}
	
	Transition t0
		/*
		 * REQUIREMENT req-step
		 * This allow to stop any ongoing movement of the robot after a certain amount 
		 * of a prefixed time expressed in seconds.
		 */
		whenTimeVar StepTime -> endStep
		/*
		 * REQUIREMENT req-stop
		 * When the robot is performing a step this allow to immediately stop any ongoing 
		 * movement.
		 */
		whenMsg 	stop     -> endStep
		
	/*
  	 * REQUIREMENT req-step
  	 * This will stop the any ongoing movement of the robot at the end of a step.
  	 */
	State endStep {
		printCurrentMessage
		run itunibo.robotVirtual.clientWenvObjTcp.sendMsg("h")
	}
	Goto work
	
	/*
  	 * REQUIREMENT req-stop
  	 * This will stop any ongoing movement immediately.
  	 */
	State doStop {
		printCurrentMessage
		run itunibo.robotVirtual.clientWenvObjTcp.sendMsg("h")
	}
	Goto work
}

QActor robotcallersimulator context ctxRobot {
	State s0 initial {
		println("robotCallerSimulator start")
		// go in step and back home
		forward robot -m step : step(1000)
		delay 1000
		forward robot -m cmd : cmd(d)
		delay 1000
		forward robot -m cmd : cmd(d)
		delay 1000
		forward robot -m step : step(1000)
		delay 1000
		forward robot -m cmd : cmd(d)
		delay 1000
		forward robot -m cmd : cmd(d)
		delay 1000
		
		// go in step and stop before time exceed
		forward robot -m step : step(10000)
		delay 1000
		forward robot -m stop : stop
		delay 1000
		forward robot -m cmd : cmd(d)
		delay 1000
		forward robot -m cmd : cmd(d)
		delay 1000
		forward robot -m cmd : cmd(w)
		delay 1000
		forward robot -m cmd : cmd(d)
		delay 1000
		forward robot -m cmd : cmd(d)
		delay 1000
	}
}





/* Generated by AN DISI Unibo */ 
package it.unibo.basicrobot

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Basicrobot ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						
						//val sonaractorfilter = itunibo.robot.rx.sonaractorfilter( "sonaractorfilter"  ) 
						//sonaractorfilter.subscribeLocalActor( "basicrobot" )
						println("basicrobot | starts (with robotadapter in the same context)")
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
					}
					 transition(edgeName="t00",targetState="handleCmd",cond=whenDispatch("cmd"))
					transition(edgeName="t01",targetState="handleObstacle",cond=whenEvent("obstacle"))
					transition(edgeName="t02",targetState="handleSonar",cond=whenEvent("sonarRobot"))
				}	 
				state("handleCmd") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("cmd(X)"), Term.createTerm("cmd(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("basicrobot | redirect cmd to robotadapter ")
								forward("cmd", "cmd(${payloadArg(0)})" ,"robotadapter" ) 
						}
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("handleObstacle") { //this:State
					action { //it:State
						forward("cmd", "cmd(h)" ,"robotadapter" ) 
						println("basicrobot | stops (for safety) since  obstacle  ")
					}
					 transition( edgeName="goto",targetState="farFromObstacle", cond=doswitch() )
				}	 
				state("farFromObstacle") { //this:State
					action { //it:State
						println("basicrobot |  going back (to avoid event-generation) ")
						forward("cmd", "cmd(s)" ,"robotadapter" ) 
						delay(250) 
						forward("cmd", "cmd(h)" ,"robotadapter" ) 
						stateTimer = TimerActor("timer_farFromObstacle", 
							scope, context!!, "local_tout_basicrobot_farFromObstacle", 350.toLong() )
					}
					 transition(edgeName="t03",targetState="work",cond=whenTimeout("local_tout_basicrobot_farFromObstacle"))   
					transition(edgeName="t04",targetState="farFromObstacle",cond=whenEvent("obstacle"))
				}	 
				state("handleSonar") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
					}
				}	 
			}
		}
}

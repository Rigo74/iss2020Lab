/*
 * ================================================================
 * This file includes (A TEXTUAL REPRESENTATION of) A MODEL 
 * of the software system (expressed using the language/metamodel qak)
 * as the result of PROJECT PHASE.
 * 
 * NOV 2019: added the idea of (sonar) data stream
 * ================================================================
 */
System basicrobot 

mqttBroker "192.168.1.14" : 1883

Dispatch cmd      : cmd(X)
Event  userCmd    : userCmd(X)
Event  obstacle   : obstacle( DISTANCE )
Event  alarm      : alarm( V )   
Event  sonarRobot : sonar( D )

Context ctxRadarGui ip   [ host= "localhost"   port= 8038 ] +mqtt
Context ctxBasicRobot ip [ host= "localhost"   port= 8018 ] +mqtt 


/*
 * QActor defined in kotlin that 'transforms' a cmd:cmd(X) into 
 * a command to the concrete robot specified in basicRobotConfig.pl
 */
CodedQActor robotadapter context ctxBasicRobot 
		//className "itunibo.robot.robotAdapterQa"	    //OCT 2019
		className "itunibo.robot.robotAdapterQaStream"  //NOV 2019
 
QActor basicrobot context ctxBasicRobot{

	State s0 initial{  
		println("	basicrobot | starts (with robotadapter in the same context)")
	}
	Goto work    
	
	State work{ }
	Transition t0 
			whenMsg cmd          -> handleCmd
			whenEvent userCmd    -> handleUserCmd
			whenEvent obstacle   -> handleObstacle
   
 /*
  * REQUIREMENT req-cmd 
  */
	State handleCmd {    
 		printCurrentMessage 
		onMsg( cmd : cmd(X) ){  //redirect the command to the robotadapter
			println("	basicrobot | redirect userCmd to robotadapter ")
 			forward robotadapter -m cmd : cmd( $payloadArg(0 ) )
		}
	}
	Goto work
	
	State handleUserCmd {    
 		printCurrentMessage 
		onMsg( userCmd : userCmd(X) ){  //redirect the command to the robotadapter
			//println("	basicrobot | redirect cmd to robotadapter ")
 			forward robotadapter -m cmd : cmd( $payloadArg(0 ) )
		}
	}
	Goto work
	
/*
 * Introduced after problem analysis
 */	
	State handleObstacle{
		forward robotadapter -m cmd : cmd( h )
		println("	basicrobot | stops (for safety) since  obstacle  ")
 	}
 	//Goto work
	Goto farFromObstacle 	//Added after introducing the real robot

	State farFromObstacle{
		println("	basicrobot |  going back (to avoid event-generation) ")
 		forward robotadapter -m cmd : cmd( s )
		delay 150
		forward robotadapter -m cmd : cmd( h )
	}
	Goto work
//	Transition t0 
//			whenTime 350       -> work
//			whenEvent obstacle -> farFromObstacle
			
}  

/*
 * The actor sentinel is sensible to alarm events emitted by the external world
 */
 QActor sentinel context ctxBasicRobot{
	State s0 initial{ 
		delay 1000 
		println("	sentinel | STARTS")
["  
//CREATE A PIPE for the sonar-data stream
//WARNING: use myself to denote the sentinel actor, since this refers to the state

val logger   = itunibo.robot.rx.Logger(\"logger\")
val filter   = itunibo.robot.rx.sonaractorfilter(\"filter\", myself)  //generates obstacle
val forradar = itunibo.robot.rx.sonarforradar(\"forradar\", myself)  //generates polar
//itunibo.robot.robotSupport.subscribe( logger ).subscribe( filter )
itunibo.robot.robotSupport.subscribe( filter ).subscribe( forradar ) 
"]  
	} 
	Goto work
	
	State work{  }
	Transition t0 
		//whenEvent obstacle   -> handleObstacle
		whenEvent sonarRobot -> showTheMsg
		whenEvent alarm      -> handleAlarm

	State showTheMsg{
		printCurrentMessage
	}
	Goto work

	State handleObstacle{
		printCurrentMessage
		println("	sentinel | handleObstacle: emits alarm(obstacle) ")
		emit alarm : alarm(obstacle)
	}
 	Goto s0
 	 	
	State handleAlarm{
		printCurrentMessage
		println("	sentinel | handleAlarm ")
	}
 	Transition t0 
		whenEvent alarm -> handleAlarm
 }

/*
 * ================================================================
 * This file includes (A TEXTUAL REPRESENTATION of) A MODEL 
 * of the software system (expressed using the language/metamodel qak)
 * as the result of PROJECT PHASE.
 * ================================================================
 */
System  basicrobot 

Dispatch cmd     : cmd(X)
Event  obstacle  : obstacle( DISTANCE )
Event  alarm     : alarm( V )   

Context ctxBasicRobot ip [ host= "localhost"   port= 8018 ]

/*
 * The robotadapter is a QActor defined in kotlin
 * that 'transforms' a cmd:cmd(X) into a command to the
 * concrete robot specified in basicRobotConfig.pl
 */
CodedQActor robotadapter context ctxBasicRobot 
				className "itunibo.robot.robotAdapterQa"

QActor basicrobot context ctxBasicRobot{
	State s0 initial{
		println("basicrobot | starts (with robotadapter in the same context)")
	}
	Goto work    
	
	State work{ }
	Transition t0 
			whenMsg cmd        -> handleCmd
			whenEvent obstacle -> handleObstacle
   
 /*
  * REQUIREMENT req-cmd 
  */
	State handleCmd {    
		//println("basicrobot | handleCmd ")
		printCurrentMessage 
		onMsg( cmd : cmd(X) ){  //redirect the command to the robotadapter
 			forward robotadapter -m cmd : cmd( $payloadArg(0 ) )
		}
	}
	Goto work
	
/*
 * Introduced after problem analysis
 */	
	State handleObstacle{
		forward robotadapter -m cmd : cmd( h )
		println("basicrobot | stops (for safety) since  obstacle  ")
 	}
 	//Goto work
	Goto farFromObstacle 	//Added after introducing the real robot

	State farFromObstacle{
		println("basicrobot |  going back (to avoid event-generation) ")
 		forward robotadapter -m cmd : cmd( s )
		delay 250
		forward robotadapter -m cmd : cmd( h )
	}
	Transition t0 
			whenTime 350       -> work
			whenEvent obstacle -> farFromObstacle
}  

/*
 * The actor sentinel is sensible to alarm events emitted by the external world
 */
 QActor sentinel context ctxBasicRobot{
	State s0 initial{ 
		println("sentinel waits ..")
	}
	Transition t0 
		whenEvent obstacle -> handleObstacle
		whenEvent alarm    -> handleAlarm

	State handleObstacle{
		printCurrentMessage
		println("sentinel handleObstacle: emits alarm(obstacle) ")
		emit alarm : alarm(obstacle)
	}
 	Goto s0
 	 	
	State handleAlarm{
		printCurrentMessage
		println("sentinel handleAlarm ")
	}
 	Transition t0 
		whenEvent alarm -> handleAlarm
 }

/* Generated by AN DISI Unibo */ 
package it.unibo.localuser

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Localuser ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("localuser doing a request ")
						request("cmd", "cmd(xxx)" ,"resource" )  
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						println("localuser work .... ")
					}
					 transition(edgeName="t03",targetState="handleReply",cond=whenReply("replytocmd"))
					transition(edgeName="t04",targetState="handleRequestInfo",cond=whenRequest("info"))
				}	 
				state("handleReply") { //this:State
					action { //it:State
						println("       --- localuser handleReply ")
						println("$name in ${currentState.stateName} | $currentMsg")
						println("       --- localuser handleReply and terminates")
					}
				}	 
				state("handleRequestInfo") { //this:State
					action { //it:State
						println("       --- handleRequestInfo ")
						println("$name in ${currentState.stateName} | $currentMsg")
						println("       --- handleRequestInfo ")
						if( checkMsgContent( Term.createTerm("info(X)"), Term.createTerm("info(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								val ANSW = "answerTo_${payloadArg(0)}" 
								answer("info", "replytoinfo", "replytoinfo($ANSW)"   )  
						}
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
}
